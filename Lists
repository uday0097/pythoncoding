Data Structures
Data Structures allow us to store and organize data efficiently.
This will allow us to easily access and perform operations on the data.

In Python, there are four built-in data structures

List
Tuple
Set
Dictionary
List
List is the most versatile python data structure.
Holds an ordered sequence of items.
Creating a List
Created by enclosing elements within [square] brackets.
Each item is separated by a comma.
a = 2
list_a = [5, "Six", a, 8.2]
print(type(list_a))
print(list_a)
o/p <class 'list'>
[5, 'Six', 2, 8.2]
Creating a List of Lists
a = 2
list_a = [5, "Six", a, 8.2]
list_b = [1, list_a]
print(list_b)
o/p  [1, [5, 'Six', 2, 
Length of a List
a = 2
list_a = [5, "Six", a, 8.2]
print(len(list_a))   o/p 4
Accessing List Items
To access elements of a list, we use Indexing.
a = 2
list_a = [5, "Six", a, 8.2]
print(list_a[1])  o/p  six
Iterating Over a List
a = 2
list_a = [5, "Six", a, 8.2]
for item in list_a:
    print(item)
o/p
5
Six
2
8.2
List Concatenation
Similar to strings, + operator concatenates lists.
list_a = [1, 2, 3]
list_b = ["a", "b", "c"]
list_c = list_a + list_b
print(list_c)
o/p  [1, 2, 3, 'a', 'b', 
Adding Items to List
list_a = []
print(list_a)
for i in range(1,4):
    list_a += [i]
print(list_a)
o/p []
[1, 2, 3
Repetition
* Operator repeats lists.
list_a = [1, 2]
list_b = list_a * 3
print(list_b)
o/p  [1, 2, 1, 2, 1
List Slicing
Obtaining a part of a list is called List Slicing.
list_a = [5, "Six", 2, 8.2]
list_b = list_a[:2]
print(list_b)
o/p [5, 'Six
Extended Slicing
Similar to string extended slicing, we can extract alternate items using step.
list_a = ["R", "B", "G", "O", "W"]
list_b = list_a[0:5:3]
print(list_b)
o/p  ['R', 'O'
Converting to List
list(sequence) takes a sequence and converts it into list.
color = "Red"
list_a = list(color)
print(list_a)
o/p  ['R', 'e', '
list_a = list(range(4))
print(list_a)
o/p  [0, 1, 2,
Lists are Mutable
Lists can be modified.
Items at any position can be updated.
list_a = [1, 2, 3, 5]
print(list_a)
list_a[3] = 4
print(list_a)
o/p [1, 2, 3, 5]
[1, 2, 3, 
Strings are Immutable
Strings are Immutable (Canâ€™t be modified).
message = "sea you soon"
message[2] = "e"
print(message)
o/p TypeError: 'str' object does not support ite
Working with Lists
Object

In general, anything that can be assigned to a variable in Python is referred to as an object.

Strings, Integers, Floats, Lists etc. are all objects.

Examples

"A"
1.25
[1,2,3]
Identity of an Object
Whenever an object is created in Python, it will be given a unique identifier (id).

This unique id can be different for each time you run the program.

Every object that you use in a Python Program will be stored in Computer Memory.

The unique id will be related to the location where the object is stored in the Computer Memory.
Finding Id
We can use the id() to find the id of a object.
print(id("Hello")) o/p 1439882333
list_a = [1, 2, 3]
list_b = [1, 2, 3]
print(id(list_a))
print(id(list_b))
139637858236800
139637857505
Modifying Lists
Modifying Lists - 1
When assigned an existing list both the variables list_a and list_b will be referring to the same object.
list_a = [1, 2, 3]
list_b = list_a
print(id(list_a))
print(id(list_b))
o/p  140334087715264
1403340877152
Modifying Lists - 2
When assigned an existing list both the variables list_a and list_b will be referring to the same object.
list_a = [1, 2, 3, 5]
list_b = list_a
list_b[3] = 4
print("list a : " + str(list_a))
print("list b : " + str(list_b))
o/p  list a : [1, 2, 3, 4]
list b : [1, 2, 3,
Modifying Lists - 3
The assignment will update the reference to new object.
list_a = [1, 2]
list_b = list_a
list_a = [6, 7]
print("list a : " + str(list_a))
print("list b : " + str(list_b))
o/p  list a : [6, 7]
list b : [1, 2
Modifying Lists - 4
The assignment will update the reference to a new object.
list_a = [1, 2]
list_b = list_a
list_a = list_a + [6, 7]
print("list a : " + str(list_a))
print("list b : " + str(list_b))
o/p  list a : [1, 2, 6, 7]
list b : [1, 2
Modifying Lists - 5
Compound assignment will update the existing list instead of creating a new object.
list_a = [1, 2]
list_b = list_a
list_a += [6, 7]
print("list a : " + str(list_a))
print("list b : " + str(list_b))
o/p  list a : [1, 2, 6, 7]
list b : [1, 2, 6, 7]
Modifying Lists - 6
Updating mutable objects will also effect the values in the list, as the reference is changed.
list_a = [1,2]
list_b = [3, list_a]
list_a[1] = 4
print(list_a)
print(list_b)
o/p  [1, 4]
[3, [1, 4]]
Modifying Lists - 7
Updating immutable objects will not effect the values in the list, as the reference will be changed.  
a = 2
list_a = [1,a]
print(list_a)
a = 3
print(list_a)
o/p [1, 2]
[1, 
LISTS AND STRINGS
Lists and Strings
Splitting
str_var.split(separator)

Splits a string into a list at every specified separator.
If no separator is specified, default separator is whitespace.

Code
nums = "1 2 3 4"
num_list = nums.split()
print(num_list)
o/p
['1', '2', '3', 
Multiple WhiteSpaces
Multiple whitespaces are considered as single when splitting.
nums = "1  2 3 4 "
num_list = nums.split()
print(num_list)
o/p
['1', '2', '3', 
New line \n and tab space \t are also whitespace.
nums = "1\n2\t3 4"
num_list = nums.split()
print(num_list)
o/p
['1', '2', '3', '4
Using Separator
Breaks up a string at the specified separator.
nums = "1,2,3,4"
num_list = nums.split(',')
print(num_list)
o/p
['1', '2', '3', 
nums = "1,2,,3,4,"
num_list = nums.split(',')
print(num_list)
o/p
['1', '2', '', '3', '4'
Space as Separator
nums = "1  2 3 4 "
num_list = nums.split(" ")
print(num_list)
o/p
['1', '', '2', '3', '
String as Separator
string_a = "Python is a programming language"
list_a = string_a.split('a')
print(list_a)
o/p
['Python is ', ' progr', 'mming l', 'ngu
string_a = "step-by-step execution of code"
list_a = string_a.split('step')
print(list_a)
['', '-by-', ' execution o
Joining
str.join(sequence) 

Takes all the items in a sequence of strings and joins them into one string.
list_a = ['Python is ', ' progr', 'mming l', 'ngu', 'ge']
string_a = "a".join(list_a)
print(string_a)
o/p
Python is a programming l
Joining Non String Values
Sequence should not contain any non-string values.
list_a = list(range(4))
string_a = ",".join(list_a)
print(string_a)
o/p
TypeError: sequence item 0: expected str instan
Negative Indexing
Using a negative index returns the nth item from the end of list.

Last item in the list can be accessed with index -1
Reversing a List
-1 for step will reverse the order of items in the list.
list_a = [5, 4, 3, 2, 1]
list_b = list_a[::-1]
print(list_b)
o/p
[1, 2, 3, 4,
Accessing List Items
list_a = [5, 4, 3, 2, 1]
item = list_a[-1]
print(item)
o/p 1 
list_a = [5, 4, 3, 2, 1]
item = list_a[-4]
print(item)
o/p 4
Slicing With Negative Index
You can also specify negative indices while slicing a List.  
list_a = [5, 4, 3, 2, 1]
list_b = list_a[-3:-1]
print(list_b)
o/p
[3, 2
Out of Bounds Index
While slicing, Index can go out of bounds
list_a = [5, 4, 3, 2, 1]
list_b = list_a[-6:-2]
print(list_b)
o/p
[5, 4, 3]
Negative Step Size
variable[start:end:negative_step]

Negative Step determines the decrement between each index for slicing.

Start index should be greater than the end index in this case

start > end
Negative Step Size Examples
Example - 1
list_a = [5, 4, 3, 2, 1]
list_b = list_a[4:2:-1]
print(list_b)o/p [1,2]
Example - 2

Negative step requires the start to be greater than end.
list_a = [5, 4, 3, 2, 1]
list_b = list_a[2:4:-1]
print(list_b)
o/p []
Reversing a List
-1 for step will reverse the order of items in the list.
list_a = [5, 4, 3, 2, 1]
list_b = list_a[::-1]
print(list_b)
o/p
[1, 2, 3, 4,
Reversing a String
-1 for step will reverse the order of the characters.
string_1 = "Program"
string_2 = string_1[::-1]
print(string_2)
o/p
margo
Negative Step Size - Strings
string_1 = "Program"
string_2 = string_1[6:0:-2]
print(string_2)
o/p  mro
Indexing & Slicing - Strings
Example - 1

Code
string_1 = "Program"
string_2 = string_1[-1]
print(string_2)
o/p m
string_1 = "Program"
string_2 = string_1[-4:-1]
print(string_2)
o/p gra

